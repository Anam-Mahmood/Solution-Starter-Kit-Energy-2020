// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CIR c i r
//
// swagger:model CIR
type CIR struct {

	// Barcode of the item
	// Minimum: 1
	BarcodeID int64 `json:"barcode_id,omitempty"`

	// Identification of this item within the CIR database
	// Required: true
	// Minimum: 1
	CirID *int64 `json:"cir_id"`

	// the general name for this item
	// Required: true
	// Min Length: 3
	Name *string `json:"name"`

	// the actual impact rating
	// Required: true
	Rating *float64 `json:"rating"`

	// Vendor of the item
	// Minimum: 1
	VendorID int64 `json:"vendor_id,omitempty"`
}

// Validate validates this c i r
func (m *CIR) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBarcodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCirID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CIR) validateBarcodeID(formats strfmt.Registry) error {

	if swag.IsZero(m.BarcodeID) { // not required
		return nil
	}

	if err := validate.MinimumInt("barcode_id", "body", int64(m.BarcodeID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CIR) validateCirID(formats strfmt.Registry) error {

	if err := validate.Required("cir_id", "body", m.CirID); err != nil {
		return err
	}

	if err := validate.MinimumInt("cir_id", "body", int64(*m.CirID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CIR) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 3); err != nil {
		return err
	}

	return nil
}

func (m *CIR) validateRating(formats strfmt.Registry) error {

	if err := validate.Required("rating", "body", m.Rating); err != nil {
		return err
	}

	return nil
}

func (m *CIR) validateVendorID(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorID) { // not required
		return nil
	}

	if err := validate.MinimumInt("vendor_id", "body", int64(m.VendorID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CIR) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CIR) UnmarshalBinary(b []byte) error {
	var res CIR
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
